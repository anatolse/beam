name: Build

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BUILD_CONFIG: RelWithDebInfo
  
#base_deploy: &base
    

jobs:
###############################################################################
# OSX Release
###############################################################################
  build_macosx:
    runs-on: macos-10.15

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Create Build Environment
      run: |
        echo $GITHUB_WORKSPACE
        curl -O https://raw.githubusercontent.com/Homebrew/homebrew-core/5da5895add2f6b9320d654dd844d4827f6876c8b/Formula/boost.rb
        brew install ./boost.rb 
        
    - name: Configure CMake
      env:
        OPENSSL_ROOT_DIR: "/usr/local/opt/openssl@1.1"  
      run: |
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBEAM_LINK_TYPE=Static -DBRANCH_NAME=$GITHUB_REF -DBEAM_SIGN_MACOS_BINARY=On -DBEAM_HW_WALLET=Off .
        echo "BEAM_VERSION=$(cat beam_version.gen)" >> $GITHUB_ENV
        rm beam_version.gen
        echo BEAM_VERSION = ${{env.BEAM_VERSION}}        
    - name: Build
      run: |
        cmake --build . --parallel --config $BUILD_TYPE

    - name: Test
      if: ${{false}}
      run: ctest -C $BUILD_TYPE --verbose
    
    - name: Deploy wallet
      uses: actions/upload-artifact@v2        
      with:
        name: beam-wallet-${{env.BEAM_VERSION}}
        path: |
          wallet/cli/beam-wallet-masternet
          wallet/cli/beam-wallet.cfg
        if-no-files-found: error  


    - name: Deploy node
      uses: actions/upload-artifact@v2        
      with:
        name: beam-node-${{env.BEAM_VERSION}}
        path: |
          beam/beam-node-masternet
          beam/beam-node.cfg
        if-no-files-found: error

###############################################################################
# Linux Release
###############################################################################    
  build_ubuntu:
    if: ${{false}}
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Create Build Environment
      run: |
        sudo apt-get install g++-7 libssl-dev curl libxi-dev libcups2-dev
        #sudo git clone --depth=1 https://github.com/BeamMW/boost-linux.git /usr/local/boost_1_69_0
        #export BOOST_ROOT="/usr/local/boost_1_69_0"
        
    - name: Configure CMake
      env:
        CC: gcc-7
        CXX: g++-7 
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      #working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: |
        git rev-list HEAD --count
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE-DBOOST_ROOT=$BOOST_ROOT_1_72_0 -DBEAM_LINK_TYPE=Static -DBRANCH_NAME=$GITHUB_REF -DBEAM_HW_WALLET=Off .


    - name: Build
      #working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: make -j$(nproc)

    - name: Test
      #working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --verbose
      
###############################################################################
# Windows Release
###############################################################################  
  build_windows:
    if: ${{false}}
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Create Build Environment
      run: |
        git clone --depth=1 https://github.com/BeamMW/libs.git c:/beam-libs
        
    - name: Configure CMake
      env:
        OPENSSL_ROOT_DIR: c:\beam-libs\openssl
      shell: cmd  
      run: |
        cmake %GITHUB_WORKSPACE% -G "Visual Studio 16 2019" -A x64 -DBOOST_ROOT=%BOOST_ROOT_1_72_0% -DCMAKE_BUILD_TYPE=%BUILD_CONFIG% -DBEAM_LINK_TYPE=Static -DBRANCH_NAME=%GITHUB_REF% -DBEAM_BUILD_JNI=On -DBEAM_HW_WALLET=Off .

    - name: Build
      #working-directory: ${{runner.workspace}}/build
      shell: cmd
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --parallel --config %BUILD_CONFIG%

    - name: Test
      #working-directory: ${{runner.workspace}}/build
      shell: cmd
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C %BUILD_CONFIG% --verbose
